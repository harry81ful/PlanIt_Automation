# Test info

- Name: @testCase2 contact form page error test >> @testCase2 submit contacrt form with all fields filled
- Location: C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\testCase2.spec.ts:14:7

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\testCase2.spec.ts:23:43
```

# Page snapshot

```yaml
- link "Jupiter Toys":
  - /url: "#"
  - img
  - text: Jupiter Toys
- list:
  - listitem:
    - link "Home":
      - /url: "#/home"
  - listitem:
    - link "Shop":
      - /url: "#/shop"
  - listitem:
    - link "Contact":
      - /url: "#/contact"
- list:
  - listitem:
    - link "Login":
      - /url: ""
  - listitem:
    - link "Cart (0)":
      - /url: "#/cart"
- strong: We welcome your feedback
- text: "- tell it how it is."
- group:
  - text: Forename *
  - textbox "Forename *": Christophe
  - text: Surname
  - textbox "Surname": Gleichner-Beer
  - text: Email *
  - textbox "Email *": ChristopheGleichner-Beer@gmail.com
  - text: Your email address will only be used in reply to this message. We
  - strong: never
  - text: send spam email or give your email address to others. Telephone
  - textbox "Telephone": 02 12345678
  - text: Only provide your telephone number
  - emphasis: if
  - text: you want us to contact you this way. Message *
  - textbox "Message *": Cupressus speculum similique. Sequi alienus amicitia cavus amissio supplanto distinctio taceo. Nemo modi cursus dolorum stips arx.
- link "Submit":
  - /url: ""
- separator
- contentinfo:
  - paragraph: Â© Jupiter Toys 2025
- heading "Sending Feedback" [level=1]
```

# Test source

```ts
   1 | import { test, expect } from "../fixtures/pomFixtures";
   2 | import { contactPage } from "../pages/contacFormPage";
   3 |
   4 | test.describe("@testCase2 contact form page error test", () => {
   5 |   test.beforeEach(async ({ page, landingPage, contactFormPage }) => {
   6 |     await landingPage.goto();
   7 |     await page.waitForLoadState("networkidle");
   8 |     const isPageTitleVisible = await landingPage.isPageTitleVIsible();
   9 |     await expect(isPageTitleVisible).toBeTruthy();
  10 |     await landingPage.navBar("Contact");
  11 |     await expect(contactFormPage.contactFormHeader).toBeVisible();
  12 |   });
  13 |
  14 |   test("@testCase2 submit contacrt form with all fields filled", async ({
  15 |     page,
  16 |     contactFormPage,
  17 |   }) => {
  18 |     await contactFormPage.fillContactForm();
  19 |     await contactFormPage.submitContactForm();
  20 |     await page.waitForLoadState("networkidle");
  21 |     const isSuccessMessageVisible =
  22 |       await contactFormPage.SuccessMessage.isVisible();
> 23 |     await expect(isSuccessMessageVisible).toBeTruthy();
     |                                           ^ Error: expect(received).toBeTruthy()
  24 |   });
  25 | });
  26 |
```