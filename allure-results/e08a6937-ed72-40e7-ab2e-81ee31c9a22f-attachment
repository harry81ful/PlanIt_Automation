# Test info

- Name: contact form page test >> submit form with only forename and surname
- Location: C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\tes1.spec.ts:24:7

# Error details

```
Error: expect(received).toBeTruthy()

Received: false
    at C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\tes1.spec.ts:33:41
```

# Page snapshot

```yaml
- link "Jupiter Toys":
  - /url: "#"
  - img
  - text: Jupiter Toys
- list:
  - listitem:
    - link "Home":
      - /url: "#/home"
  - listitem:
    - link "Shop":
      - /url: "#/shop"
  - listitem:
    - link "Contact":
      - /url: "#/contact"
- list:
  - listitem:
    - link "Login":
      - /url: ""
  - listitem:
    - link "Cart (0)":
      - /url: "#/cart"
- strong: We welcome your feedback
- text: "- but we won't get it unless you complete the form correctly."
- group:
  - text: Forename *
  - textbox "Forename *": Myrtle
  - text: Surname
  - textbox "Surname": Purdy
  - text: Email *
  - textbox "Email *"
  - text: Your email address will only be used in reply to this message. We
  - strong: never
  - text: send spam email or give your email address to others. Telephone
  - textbox "Telephone"
  - text: Only provide your telephone number
  - emphasis: if
  - text: you want us to contact you this way. Message *
  - textbox "Message *"
  - text: Message is required
- link "Submit":
  - /url: ""
- separator
- contentinfo:
  - paragraph: Â© Jupiter Toys 2025
```

# Test source

```ts
   1 | import { test, expect } from "../fixtures/pomFixtures";
   2 | import { foreName, surName } from "../utilities/util";
   3 |
   4 | test.describe("contact form page test", () => {
   5 |   test.beforeEach(async ({ page, landingPage, contactFormPage }) => {
   6 |     await landingPage.goto();
   7 |     await page.waitForLoadState("networkidle");
   8 |     const isPageTitleVisible = await landingPage.isPageTitleVIsible();
   9 |     await expect(isPageTitleVisible).toBeTruthy();
  10 |     await landingPage.navBar("Contact");
  11 |     await expect(contactFormPage.contactFormHeader).toBeVisible();
  12 |   });
  13 |
  14 |   test("submit empty form and then fill form", async ({ contactFormPage }) => {
  15 |     await contactFormPage.submitContactForm();
  16 |     const isErrorBannerVisible = await contactFormPage.errorBanner.isVisible();
  17 |     await expect(isErrorBannerVisible).toBeTruthy();
  18 |
  19 |     await contactFormPage.fillContactForm();
  20 |     const hasValidationError = await contactFormPage.hasAnyValidationError();
  21 |     await expect(hasValidationError).toBeFalsy();
  22 |   });
  23 |
  24 |   test("submit form with only forename and surname", async ({
  25 |     contactFormPage,
  26 |   }) => {
  27 |     await contactFormPage.foreName.fill(foreName());
  28 |     await contactFormPage.surName.fill(surName());
  29 |     await contactFormPage.submitContactForm();
  30 |     await contactFormPage.page.waitForTimeout(500); // Wait for any validation to process
  31 |     const hasAnyValidationError =
  32 |       await contactFormPage.foreNmaeValidationError.isVisible();
> 33 |     await expect(hasAnyValidationError).toBeTruthy();
     |                                         ^ Error: expect(received).toBeTruthy()
  34 |   });
  35 | });
  36 |
```