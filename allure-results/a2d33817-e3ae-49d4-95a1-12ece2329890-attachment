# Test info

- Name: @testCase3 Buy 2 Stuffed Frog, 5 Fluffy Bunny, 3 Valentine Bear >> @testCase3 add 2 Stuffed Frog, 5 Fluffy Bunny, 3 Valentine Bear to cart and verify the count
- Location: C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\TestCase3.spec.ts:13:7

# Error details

```
Error: locator.inputValue: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('tr.cart-item').first().locator('name[name=\'quantity\']')

    at CartPage.getCartItemTotalprice (C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\pages\CartPage.ts:32:10)
    at C:\Users\khari\OneDrive\Desktop\Automations Playwright\PlanIt_Automation\tests\TestCase3.spec.ts:34:29
```

# Page snapshot

```yaml
- link "Jupiter Toys":
  - /url: "#"
  - img
  - text: Jupiter Toys
- list:
  - listitem:
    - link "Home":
      - /url: "#/home"
  - listitem:
    - link "Shop":
      - /url: "#/shop"
  - listitem:
    - link "Contact":
      - /url: "#/contact"
- list:
  - listitem:
    - link "Login":
      - /url: ""
  - listitem:
    - link "Cart (10)":
      - /url: "#/cart"
- paragraph:
  - text: There are 10 items in your cart, you can
  - link "Checkout":
    - /url: "#/checkout/"
  - text: or carry on
  - link "Shopping":
    - /url: "#/shop/"
  - text: .
- table:
  - rowgroup:
    - row "Item Price Quantity Subtotal Actions":
      - cell "Item"
      - cell "Price"
      - cell "Quantity"
      - cell "Subtotal"
      - cell "Actions"
  - rowgroup:
    - row "Stuffed Frog $10.99 2 $21.98":
      - cell "Stuffed Frog":
        - img
        - text: Stuffed Frog
      - cell "$10.99"
      - cell "2":
        - spinbutton: "2"
      - cell "$21.98"
      - cell:
        - link:
          - /url: ""
    - row "Fluffy Bunny $9.99 5 $49.95":
      - cell "Fluffy Bunny":
        - img
        - text: Fluffy Bunny
      - cell "$9.99"
      - cell "5":
        - spinbutton: "5"
      - cell "$49.95"
      - cell:
        - link:
          - /url: ""
    - row "Valentine Bear $14.99 3 $44.97":
      - cell "Valentine Bear":
        - img
        - text: Valentine Bear
      - cell "$14.99"
      - cell "3":
        - spinbutton: "3"
      - cell "$44.97"
      - cell:
        - link:
          - /url: ""
  - rowgroup:
    - 'row "Total: 116.9"':
      - 'cell "Total: 116.9"':
        - strong: "Total: 116.9"
    - row "Check Out Empty Cart":
      - cell "Check Out Empty Cart":
        - link "Check Out":
          - /url: "#/checkout"
        - link "Empty Cart":
          - /url: ""
- separator
- contentinfo:
  - paragraph: Â© Jupiter Toys 2025
```

# Test source

```ts
   1 | import { Page } from "@playwright/test";
   2 |
   3 | export class CartPage {
   4 |   readonly page: Page;
   5 |
   6 |   constructor(page: Page) {
   7 |     this.page = page;
   8 |   }
   9 |
  10 |   async itemsInCart() {
  11 |     const cartItems = this.page.locator("tr.cart-item");
  12 |     await cartItems.first().waitFor({ state: "attached" });
  13 |     const itemCount = await cartItems.count();
  14 |     return itemCount;
  15 |   }
  16 |
  17 |   async getCartItemTotalprice() {
  18 |     let totalPrice = 0;
  19 |
  20 |     const cartItems = this.page.locator("tr.cart-item");
  21 |     await cartItems.first().waitFor({ state: "attached" });
  22 |     const itemCount = await cartItems.count();
  23 |
  24 |     for (let i = 0; i < itemCount; i++) {
  25 |       const row = cartItems.nth(i);
  26 |
  27 |       const priceText = await row.locator("td").nth(1).innerText();
  28 |       const toyPrice = parseFloat(priceText.replace("$", ""));
  29 |
  30 |       const toyQantyText = await row
  31 |         .locator("name[name='quantity']")
> 32 |         .inputValue();
     |          ^ Error: locator.inputValue: Test timeout of 30000ms exceeded.
  33 |       const toyQuantity = parseInt(toyQantyText);
  34 |
  35 |       totalPrice += toyPrice * toyQuantity;
  36 |     }
  37 |     return totalPrice;
  38 |   }
  39 |
  40 |   async getCartTotalPrice() {
  41 |     const totalPriceText = await this.page.locator(".total").innerText();
  42 |     return parseFloat(totalPriceText);
  43 |   }
  44 | }
  45 |
```