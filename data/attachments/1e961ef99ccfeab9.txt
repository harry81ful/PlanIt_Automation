# Test info

- Name: @testCase1 contact form page error test >> @testCase1 submit empty form and then fill form
- Location: /home/runner/work/PlanIt_Automation/PlanIt_Automation/tests/testCase1.spec.ts:16:7

# Error details

```
Error: expect(received).toBeFalsy()

Received: true
    at /home/runner/work/PlanIt_Automation/PlanIt_Automation/tests/testCase1.spec.ts:25:38
```

# Page snapshot

```yaml
- link "Jupiter Toys":
  - /url: "#"
  - img
  - text: Jupiter Toys
- list:
  - listitem:
    - link "Home":
      - /url: "#/home"
  - listitem:
    - link "Shop":
      - /url: "#/shop"
  - listitem:
    - link "Contact":
      - /url: "#/contact"
- list:
  - listitem:
    - link "Login":
      - /url: ""
  - listitem:
    - link "Cart (0)":
      - /url: "#/cart"
- strong: We welcome your feedback
- text: "- but we won't get it unless you complete the form correctly."
- group:
  - text: Forename *
  - textbox "Forename *": Keith
  - text: Surname
  - textbox "Surname": O'Keefe
  - text: Email *
  - textbox "Email *": KeithO'Keefe@gmail.com
  - text: Please enter a valid email Your email address will only be used in reply to this message. We
  - strong: never
  - text: send spam email or give your email address to others. Telephone
  - textbox "Telephone": 02 12345678
  - text: Only provide your telephone number
  - emphasis: if
  - text: you want us to contact you this way. Message *
  - textbox "Message *": Atrox acceptus magni cultura velum. Creptio cubo titulus viriliter uterque stella vobis. Vinitor patria amplexus.
- link "Submit":
  - /url: ""
- separator
- contentinfo:
  - paragraph: Â© Jupiter Toys 2025
```

# Test source

```ts
   1 | import { test, expect } from "../fixtures/pomFixtures";
   2 | import { foreName, surName, telephone } from "../utilities/util";
   3 |
   4 | test.describe("@testCase1 contact form page error test", () => {
   5 |   test.beforeEach(async ({ page, landingPage, contactFormPage }) => {
   6 |     await landingPage.goto();
   7 |     await page.waitForLoadState("networkidle");
   8 |
   9 |     const isPageTitleVisible = await landingPage.isPageTitleVIsible();
  10 |     await expect(isPageTitleVisible).toBeTruthy();
  11 |
  12 |     await landingPage.navBar("Contact");
  13 |     await expect(contactFormPage.contactFormHeader).toBeVisible();
  14 |   });
  15 |
  16 |   test("@testCase1 submit empty form and then fill form", async ({
  17 |     contactFormPage,
  18 |   }) => {
  19 |     await contactFormPage.submitContactForm();
  20 |     const isErrorBannerVisible = await contactFormPage.errorBanner.isVisible();
  21 |     await expect(isErrorBannerVisible).toBeTruthy();
  22 |
  23 |     await contactFormPage.fillContactForm();
  24 |     const hasValidationError = await contactFormPage.hasAnyValidationError();
> 25 |     await expect(hasValidationError).toBeFalsy();
     |                                      ^ Error: expect(received).toBeFalsy()
  26 |   });
  27 |
  28 |   test("@testCase1 submit form with only forename and surname", async ({
  29 |     contactFormPage,
  30 |   }) => {
  31 |     await contactFormPage.foreName.fill(foreName());
  32 |     await contactFormPage.surName.fill(surName());
  33 |     await contactFormPage.submitContactForm();
  34 |     const hasAnyValidationError = await contactFormPage.hasAnyValidationError();
  35 |     await expect(hasAnyValidationError).toBeTruthy();
  36 |   });
  37 |
  38 |   test("@testCase1 submit with invalid email", async ({ contactFormPage }) => {
  39 |     await contactFormPage.foreName.fill(foreName());
  40 |     await contactFormPage.surName.fill(surName());
  41 |     await contactFormPage.email.fill("invalid-email");
  42 |     await contactFormPage.telephone.fill(telephone);
  43 |     await contactFormPage.message.fill("This is a test message.");
  44 |     // await contactFormPage.submitContactForm();
  45 |   });
  46 |
  47 |   test("@testCase1 submit form with invalid telephone number", async ({
  48 |     contactFormPage,
  49 |   }) => {
  50 |     await contactFormPage.fillContactForm();
  51 |     await contactFormPage.telephone.fill("invalid-telephone");
  52 |     const hasAnyValidationError = await contactFormPage.hasAnyValidationError();
  53 |     await expect(hasAnyValidationError).toBeTruthy();
  54 |   });
  55 | });
  56 |
```