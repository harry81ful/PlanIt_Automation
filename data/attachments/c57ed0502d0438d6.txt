# Test info

- Name: @testCase2 contact form page sucess test >> @testCase2 submit contact form with all fields filled
- Location: /home/runner/work/PlanIt_Automation/PlanIt_Automation/tests/testCase2.spec.ts:16:7

# Error details

```
Error: browserType.launch: Target page, context or browser has been closed
Browser logs:

╔════════════════════════════════════════════════════════════════════════════════════════════════╗
║ Looks like you launched a headed browser without having a XServer running.                     ║
║ Set either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright. ║
║                                                                                                ║
║ <3 Playwright Team                                                                             ║
╚════════════════════════════════════════════════════════════════════════════════════════════════╝
Call log:
  - <launching> /home/runner/.cache/ms-playwright/chromium-1169/chrome-linux/chrome --disable-field-trial-config --disable-background-networking --disable-background-timer-throttling --disable-backgrounding-occluded-windows --disable-back-forward-cache --disable-breakpad --disable-client-side-phishing-detection --disable-component-extensions-with-background-pages --disable-component-update --no-default-browser-check --disable-default-apps --disable-dev-shm-usage --disable-extensions --disable-features=AcceptCHFrame,AutoExpandDetailsElement,AvoidUnnecessaryBeforeUnloadCheckSync,CertificateTransparencyComponentUpdater,DeferRendererTasksAfterInput,DestroyProfileOnBrowserClose,DialMediaRouteProvider,ExtensionManifestV2Disabled,GlobalMediaControls,HttpsUpgrades,ImprovedCookieControls,LazyFrameLoading,LensOverlay,MediaRouter,PaintHolding,ThirdPartyStoragePartitioning,Translate --allow-pre-commit-input --disable-hang-monitor --disable-ipc-flooding-protection --disable-popup-blocking --disable-prompt-on-repost --disable-renderer-backgrounding --force-color-profile=srgb --metrics-recording-only --no-first-run --enable-automation --password-store=basic --use-mock-keychain --no-service-autorun --export-tagged-pdf --disable-search-engine-choice-screen --unsafely-disable-devtools-self-xss-warnings --no-sandbox --user-data-dir=/tmp/playwright_chromiumdev_profile-MxWEeY --remote-debugging-pipe --no-startup-window
  - <launched> pid=5905
  - [pid=5905][err] [5905:5905:0530/235112.975769:ERROR:ui/ozone/platform/x11/ozone_platform_x11.cc:249] Missing X server or $DISPLAY
  - [pid=5905][err] [5905:5905:0530/235112.975808:ERROR:ui/aura/env.cc:257] The platform failed to initialize.  Exiting.

```

# Test source

```ts
   1 | import { test, expect } from "../fixtures/pomFixtures";
   2 | import { foreName, message, surName } from "../utilities/util";
   3 |
   4 | test.describe("@testCase2 contact form page sucess test", () => {
   5 |   test.beforeEach(async ({ page, landingPage, contactFormPage }) => {
   6 |     await landingPage.goto();
   7 |     await page.waitForLoadState("networkidle");
   8 |
   9 |     const isPageTitleVisible = await landingPage.isPageTitleVIsible();
  10 |     await expect(isPageTitleVisible).toBeTruthy();
  11 |
  12 |     await landingPage.navBar("Contact");
  13 |     await expect(contactFormPage.contactFormHeader).toBeVisible();
  14 |   });
  15 |
> 16 |   test("@testCase2 submit contact form with all fields filled", async ({
     |       ^ Error: browserType.launch: Target page, context or browser has been closed
  17 |     page,
  18 |     contactFormPage,
  19 |   }) => {
  20 |     await contactFormPage.fillContactForm();
  21 |     await contactFormPage.submitContactForm();
  22 |
  23 |     await contactFormPage.modalBanner.waitFor({ state: "visible" });
  24 |     await contactFormPage.modalBanner.waitFor({ state: "hidden" });
  25 |     await page.waitForLoadState("networkidle");
  26 |
  27 |     const isSuccessMessageVisible =
  28 |       await contactFormPage.SuccessMessage.isVisible();
  29 |     await expect(isSuccessMessageVisible).toBeTruthy();
  30 |   });
  31 |
  32 |   test("@testCase2 submit contact form with only mandatory fields", async ({
  33 |     contactFormPage,
  34 |   }) => {
  35 |     const firstName = foreName();
  36 |     const lastName = surName();
  37 |
  38 |     await contactFormPage.foreName.fill(firstName);
  39 |     await contactFormPage.surName.fill(lastName);
  40 |     await contactFormPage.email.fill(firstName + lastName + "@gmail.com");
  41 |     await contactFormPage.message.fill(message());
  42 |     await contactFormPage.submitContactForm();
  43 |
  44 |     await contactFormPage.modalBanner.waitFor({ state: "visible" });
  45 |     await contactFormPage.modalBanner.waitFor({ state: "hidden" });
  46 |     await contactFormPage.page.waitForLoadState("networkidle");
  47 |
  48 |     const isSuccessMessageVisible =
  49 |       await contactFormPage.SuccessMessage.isVisible();
  50 |     await expect(isSuccessMessageVisible).toBeTruthy();
  51 |   });
  52 | });
  53 |
```